; Program for calculating the factorial of a number.
; By: Jonah Boe & Calvin Passmore
; For ECE 6930 - Utah State University

; The data
.data


; Then constants
.const
s1	18	"Enter 10 numbers: "
s2	6	"LCM = "


; The code
.text

; Print the prompt
start
	LW		R1, s1(R0)
	ADDUI	R2, R0, 1
	NOP
	NOP
	NOP
prompt_loop
	SLEU	R3, R2, R1
	BEQZ	R3, end_prompt
	LW		R4, s1(R2)
	PCH	R4
	ADDUI	R2, R2, 1
	J		prompt_loop
end_prompt

; Load the data in to the right register
	JAL	get_input
	ADDUI	R2, R1, 0
	JAL	get_input
	ADDUI	R3, R1, 0
	JAL	get_input
	ADDUI	R4, R1, 0
	JAL	get_input
	ADDUI	R5, R1, 0
	JAL	get_input
	ADDUI	R6, R1, 0
	JAL	get_input
	ADDUI	R7, R1, 0
	JAL	get_input
	ADDUI	R8, R1, 0
	JAL	get_input
	ADDUI	R9, R1, 0
	JAL	get_input
	ADDUI	R10, R1, 0
	JAL	get_input
	ADDUI	R11, R1, 0
	J		list

; Get user input
get_input
	ADDUI	R1, R0, 0
	GDU	R1
	NOP
	NOP
	NOP
	BEQZ	R1, get_input
	NOP
	NOP
	NOP
	ADDI	R12, R0, 32
	PCH	R12
	JR		R31

; start the clock and order the list
list
	TR
	TGO
	ADDUI	R13, R0, 0
order_list
	SLTU	R1, R2, R3
	BNEZ	R1, orderb
	ADDUI	R12, R3, 0
	ADDUI	R3, R2, 0
	ADDUI	R2, R12, 0
orderb
	SEQI	R1, R13, 8
	BNEZ	R1, order_end
	SLTU	R1, R3, R4
	BNEZ	R1, orderc
	ADDUI	R12, R4, 0
	ADDUI	R4, R3, 0
	ADDUI	R3, R12, 0
orderc
	SEQI	R1, R13, 7
	BNEZ	R1, order_end
	SLTU	R1, R4, R5
	BNEZ	R1, orderd
	ADDUI	R12, R5, 0
	ADDUI	R5, R4, 0
	ADDUI	R4, R12, 0
orderd
	SEQI	R1, R13, 6
	BNEZ	R1, order_end
	SLTU	R1, R5, R6
	BNEZ	R1, ordere
	ADDUI	R12, R6, 0
	ADDUI	R6, R5, 0
	ADDUI	R5, R12, 0
ordere
	SEQI	R1, R13, 5
	BNEZ	R1, order_end
	SLTU	R1, R6, R7
	BNEZ	R1, orderf
	ADDUI	R12, R7, 0
	ADDUI	R7, R6, 0
	ADDUI	R6, R12, 0
orderf
	SEQI	R1, R13, 4
	BNEZ	R1, order_end
	SLTU	R1, R7, R8
	BNEZ	R1, orderg
	ADDUI	R12, R8, 0
	ADDUI	R8, R7, 0
	ADDUI	R7, R12, 0
orderg
	SEQI	R1, R13, 3
	BNEZ	R1, order_end
	SLTU	R1, R8, R9
	BNEZ	R1, orderh
	ADDUI	R12, R9, 0
	ADDUI	R9, R8, 0
	ADDUI	R8, R12, 0
orderh
	SEQI	R1, R13, 2
	BNEZ	R1, order_end
	SLTU	R1, R9, R10
	BNEZ	R1, orderi
	ADDUI	R12, R10, 0
	ADDUI	R10, R9, 0
	ADDUI	R9, R12, 0
orderi
	SEQI	R1, R13, 1
	BNEZ	R1, order_end
	SLTU	R1, R10, R11
	BNEZ	R1, order_end
	ADDUI	R12, R11, 0
	ADDUI	R11, R10, 0
	ADDUI	R10, R12, 0
order_end
	ADDUI	R13, R13, 1
	SEQI	R1, R13, 9
	BNEZ	R1, kill
	J		order_list

; Run the LCM
startlcm
; R2 and R3
	ADDUI	R12, R2, 0
	ADDUI	R13, R3, 0
rounda
	SEQ	R1, R12, R13
	BNEZ	R1, roundb
	SLTU	R1, R12, R13
	BEQZ	R1, rass
	ADDU	R12, R12, R2
	J		rounda
rass
	ADDU	R13, R13, R3
	J		rounda

; R3 and R4
	ADDUI	R3, R12, 0
	ADDUI	R13, R4, 0
roundb
	SEQ	R1, R12, R13
	BNEZ	R1, roundc
	SLTU	R1, R12, R13
	BEQZ	R1, rbss
	ADDU	R12, R12, R3
	J		roundb
rbss
	ADDU	R13, R13, R4
	J		roundb
	
; R4 and R5
	ADDUI	R4, R12, 0
	ADDUI	R13, R5, 0
roundc
	SEQ	R1, R12, R13
	BNEZ	R1, roundd
	SLTU	R1, R12, R13
	BEQZ	R1, rcss
	ADDU	R12, R12, R4
	J		roundc
rcss
	ADDU	R13, R13, R5
	J		roundc
	
; R5 and R6
	ADDUI	R5, R12, 0
	ADDUI	R13, R6, 0
roundd
	SEQ	R1, R12, R13
	BNEZ	R1, rounde
	SLTU	R1, R12, R13
	BEQZ	R1, rdss
	ADDU	R12, R12, R5
	J		roundd
rdss
	ADDU	R13, R13, R6
	J		roundd
	
; R6 and R7
	ADDUI	R6, R12, 0
	ADDUI	R13, R7, 0
rounde
	SEQ	R1, R12, R13
	BNEZ	R1, roundf
	SLTU	R1, R12, R13
	BEQZ	R1, ress
	ADDU	R12, R12, R6
	J		rounde
ress
	ADDU	R13, R13, R7
	J		rounde
	
; R7 and R8
	ADDUI	R7, R12, 0
	ADDUI	R13, R8, 0
roundf
	SEQ	R1, R12, R13
	BNEZ	R1, roundg
	SLTU	R1, R12, R13
	BEQZ	R1, rfss
	ADDU	R12, R12, R7
	J		roundf
rfss
	ADDU	R13, R13, R8
	J		roundf
	
; R8 and R9
	ADDUI	R8, R12, 0
	ADDUI	R13, R9, 0
roundg
	SEQ	R1, R12, R13
	BNEZ	R1, roundh
	SLTU	R1, R12, R13
	BEQZ	R1, rgss
	ADDU	R12, R12, R8
	J		roundg
rgss
	ADDU	R13, R13, R9
	J		roundg
	
; R9 and R10
	ADDUI	R9, R12, 0
	ADDUI	R13, R10, 0
roundh
	SEQ	R1, R12, R13
	BNEZ	R1, roundi
	SLTU	R1, R12, R13
	BEQZ	R1, rhss
	ADDU	R12, R12, R9
	J		roundh
rhss
	ADDU	R13, R13, R10
	J		roundh
	
; R10 and R11
	ADDUI	R10, R12, 0
	ADDUI	R13, R11, 0
roundi
	SEQ		R1, R12, R13
	BNEZ	R1, stop
	SLTU	R1, R12, R13
	BEQZ	R1, riss
	ADDU	R12, R12, R10
	J		roundi
riss
	ADDU	R13, R13, R11
	J		roundi
	
; Print the output and stop the clock
stop
; Carriage return
	ADDI	R1, R0, 10
	PCH	R1
; Line feed
	ADDI	R1, R0, 13
	PCH	R1
; Print LCM = ...
	LW		R1, s2(R0)
	ADDI	R2, R0, 1
	NOP
	NOP
	NOP
print_out_loop
	SLEU	R3, R2, R1
	BEQZ	R3, end_print_out
	LW		R4, s2(R2)
	PCH	R13
	ADDI	R2, R2, 1
	J		print_out_loop
end_print_out
	NOP
	NOP
	NOP
	PDU	R13
	TSP
	
; Jump back to the begining
	J		start
	
; Kill the program (for debugging): 76, 150
kill
	TSP
killoop
	J		killoop
