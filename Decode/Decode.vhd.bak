library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Decode is
	port (
		--INPUT 
		clk		: in std_logic;
		rst_l	: in std_logic;
		pc_in	: in std_logic_vector(9  downto 0);
		IR_in	: in std_logic_vector(31 downto 0);
		w_addr	: in std_logic_vector(4 downto 0);			--Write address
		w_data	: in std_logic_vector(31 downto 0);			--Write data
		--OUTPUT
		Imm		: out std_logic_vector(31 downto 0);		-- Immediate value
		pc_out	: out std_logic_vector(9 downto 0);			--Program counter, delayed by 1 cycle
		IR_out	: out std_logic_vector(31 downto 0);		--The instruction, delayed by 1 cycle
		RS1		: out std_logic_vector(31 downto 0);		--The data from RS1
		RS2		: out std_logic_vector(31 downot 0);		--The data from RS2
	);
end entity Decode;

architecture behavioral of Decode is
	
	-- Build a 2-D array type for the RAM
	subtype reg_t is std_logic_vector(31 downto 0);
	type memory_t is array(31 downto 0) of reg_t;
	
	-- Declare the RAM signal.
	signal ram : memory_t;
	signal opcode : std_logic_vector(5 downto 0);
	
begin

	--rename some parts of the input instruction
	opcode 	<= IR_in(31 downto 26);
	rd	   	<= IR_in(25 downto 21);
	r1		<= IR_in(20 downto 16);
	r2 		<= IR_in(15 downto 11);
	im_val 	<= IR_in(15 downto 0);
	
	--Signals that just get delayed and passed on
	process(clk) begin
		pc_out <= pc_in;
		IR_out <= IR_in;
	end process;
	
	--Write
	process(clk) begin
		if (w_addr = B"0000000000") then
			ram(unsigned(w_addr)) <= w_data;
		end if;
	end process;
	
	--Read
	process(clk) begin
		case opcode is
			when OP_NOP | OP_J | OP_JAL =>
				RS1 <= (others => '0');
				RS2 <= (others => '0');
				Imm <= (others => '0');
				
			when OP_LW | OP_SW =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm <= (others => '0');
				
			when OP_JR | OP_JALR | OP_BEQZ | OP_BNEZ =>
				RS1 <= ram(unsigned(rd));
				RS2 <= (others => '0');
				Imm <= (others => '0');
				
			when OP_ADD | OP_ADDU | OP_SUB | OP_SUBU =>
				RS1 <= ram(unsigned(r1));
				RS2 <= ram(unsigned(r2));
				Imm <= (others => '0');
				
			when OP_ADDI | OP_SUBI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(31 downto 16) <= (others => im_val(15));		--sign extend
				
			when OP_ADDUI | OP_SUBUI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(16 downto 0) <= (others => '0');
				
			when OP_AND | OP_OR | OP_XOR =>
				RS1 <= ram(unsigned(r1));
				RS2 <= ram(unsigned(r2));
				Imm <= (others => '0');
				
			when OP_ANDI | OP_ORI | OP_XORI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(16 downto 0) <= (others => '0');
				
			when OP_SLL | OP_SRL | OP_SRA =>
				RS1 <= ram(unsigned(r1));
				RS2 <= ram(unsigned(r2));
				Imm <= (others => '0');
				
			when OP_SLT | OP_SLTU | OP_SGT | OP_SGTU =>
				RS1 <= ram(unsigned(r1));
				RS2 <= ram(unsigned(r2));
				Imm <= (others => '0');
				
			when OP_SLTI | OP_SGTI  =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(31 downto 16) <= (others => im_val(15));		--sign extend
				
			when OP_SLTUI | OP_SGTUI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(16 downto 0) <= (others => '0');
				
			when OP_SLE | OP_SLEU | OP_SGE | OP_SGEU | OP_SEQ | OP_SNE =>
				RS1 <= ram(unsigned(r1));
				RS2 <= ram(unsigned(r2));
				Imm <= (others => '0');
				
			when OP_SLEI | OP_SGEI | OP_SEQI | OP_SNEI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(31 downto 16) <= (others => im_val(15));		--sign extend
				
			when OP_SLEUI | OP_SGEUI =>
				RS1 <= ram(unsigned(r1));
				RS2 <= (others => '0');
				Imm(15 downto 0) <= im_val;
				Imm(16 downto 0) <= (others => '0');				
		
		end case;
	end process;

end architecture behavioral;